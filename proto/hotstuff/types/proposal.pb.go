// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hotstuff/types/proposal.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type HsProposal struct {
	EpochView   int64        `protobuf:"varint,1,opt,name=epoch_view,json=epochView,proto3" json:"epoch_view,omitempty"`
	Block       *Block       `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
	TimeoutCert *TimeoutCert `protobuf:"bytes,3,opt,name=timeout_cert,json=timeoutCert,proto3" json:"timeout_cert,omitempty"`
	Time        time.Time    `protobuf:"bytes,4,opt,name=time,proto3,stdtime" json:"time"`
	Signature   []byte       `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *HsProposal) Reset()         { *m = HsProposal{} }
func (m *HsProposal) String() string { return proto.CompactTextString(m) }
func (*HsProposal) ProtoMessage()    {}
func (*HsProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c0673146b360ddc, []int{0}
}
func (m *HsProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HsProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HsProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HsProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HsProposal.Merge(m, src)
}
func (m *HsProposal) XXX_Size() int {
	return m.Size()
}
func (m *HsProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_HsProposal.DiscardUnknown(m)
}

var xxx_messageInfo_HsProposal proto.InternalMessageInfo

func (m *HsProposal) GetEpochView() int64 {
	if m != nil {
		return m.EpochView
	}
	return 0
}

func (m *HsProposal) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *HsProposal) GetTimeoutCert() *TimeoutCert {
	if m != nil {
		return m.TimeoutCert
	}
	return nil
}

func (m *HsProposal) GetTime() time.Time {
	if m != nil {
		return m.Time
	}
	return time.Time{}
}

func (m *HsProposal) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*HsProposal)(nil), "hotstuff.types.HsProposal")
}

func init() { proto.RegisterFile("hotstuff/types/proposal.proto", fileDescriptor_1c0673146b360ddc) }

var fileDescriptor_1c0673146b360ddc = []byte{
	// 326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xb3, 0xb6, 0x15, 0xbb, 0x2d, 0x1e, 0x82, 0x42, 0x88, 0x36, 0x2d, 0x9e, 0x0a, 0xc2,
	0x2e, 0xd8, 0x8b, 0x27, 0x0f, 0xf5, 0xe2, 0x45, 0x90, 0x20, 0x1e, 0xbc, 0x94, 0x26, 0x6c, 0xd2,
	0x60, 0xea, 0x84, 0xec, 0xc4, 0xda, 0xb7, 0xe8, 0x63, 0xf5, 0xd8, 0xa3, 0x27, 0x95, 0xf6, 0x05,
	0x7c, 0x04, 0xc9, 0x6c, 0x6b, 0x69, 0xc1, 0xcb, 0xb2, 0x33, 0xff, 0xff, 0xb1, 0x3f, 0xff, 0xf2,
	0xd6, 0x08, 0x50, 0x63, 0x11, 0x45, 0x12, 0xa7, 0x99, 0xd2, 0x32, 0xcb, 0x21, 0x03, 0x3d, 0x4c,
	0x45, 0x96, 0x03, 0x82, 0x7d, 0xbc, 0x91, 0x05, 0xc9, 0xee, 0x49, 0x0c, 0x31, 0x90, 0x24, 0xcb,
	0x9b, 0x71, 0xb9, 0xed, 0x18, 0x20, 0x4e, 0x95, 0xa4, 0x29, 0x28, 0x22, 0x89, 0xc9, 0x58, 0x69,
	0x1c, 0x8e, 0xb3, 0xb5, 0xc1, 0xdd, 0x7b, 0x85, 0xce, 0x7f, 0xb4, 0x20, 0x85, 0xf0, 0xc5, 0x68,
	0x17, 0x3f, 0x8c, 0xf3, 0x3b, 0xfd, 0xb0, 0xce, 0x64, 0xb7, 0x38, 0x57, 0x19, 0x84, 0xa3, 0xc1,
	0x5b, 0xa2, 0x26, 0x0e, 0xeb, 0xb0, 0x6e, 0xc5, 0xaf, 0xd3, 0xe6, 0x29, 0x51, 0x13, 0xfb, 0x92,
	0xd7, 0x08, 0x76, 0x0e, 0x3a, 0xac, 0xdb, 0xb8, 0x3a, 0x15, 0xbb, 0xe1, 0x45, 0xbf, 0x14, 0x7d,
	0xe3, 0xb1, 0x6f, 0x78, 0xb3, 0x4c, 0x09, 0x05, 0x0e, 0x42, 0x95, 0xa3, 0x53, 0x21, 0xe6, 0x6c,
	0x9f, 0x79, 0x34, 0x9e, 0x5b, 0x95, 0xa3, 0xdf, 0xc0, 0xed, 0x60, 0x5f, 0xf3, 0x6a, 0x39, 0x3a,
	0x55, 0xe2, 0x5c, 0x61, 0x2a, 0x10, 0x9b, 0x0a, 0x08, 0xa4, 0x0a, 0xfa, 0x47, 0xf3, 0xcf, 0xb6,
	0x35, 0xfb, 0x6a, 0x33, 0x9f, 0x08, 0xfb, 0x9c, 0xd7, 0x75, 0x12, 0xbf, 0x0e, 0xb1, 0xc8, 0x95,
	0x53, 0xeb, 0xb0, 0x6e, 0xd3, 0xdf, 0x2e, 0xfa, 0xf7, 0xf3, 0xa5, 0xc7, 0x16, 0x4b, 0x8f, 0x7d,
	0x2f, 0x3d, 0x36, 0x5b, 0x79, 0xd6, 0x62, 0xe5, 0x59, 0x1f, 0x2b, 0xcf, 0x7a, 0xee, 0xc5, 0x09,
	0x8e, 0x8a, 0x40, 0x84, 0x30, 0x96, 0xef, 0x45, 0xa4, 0x12, 0x0d, 0x51, 0x3a, 0x95, 0x7f, 0xf5,
	0x99, 0x6f, 0xd9, 0x6d, 0x33, 0x38, 0xa4, 0x6d, 0xef, 0x37, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x40,
	0xa8, 0x8a, 0xe8, 0x01, 0x00, 0x00,
}

func (m *HsProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HsProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HsProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Time, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Time):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintProposal(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	if m.TimeoutCert != nil {
		{
			size, err := m.TimeoutCert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Block != nil {
		{
			size, err := m.Block.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.EpochView != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.EpochView))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HsProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochView != 0 {
		n += 1 + sovProposal(uint64(m.EpochView))
	}
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.TimeoutCert != nil {
		l = m.TimeoutCert.Size()
		n += 1 + l + sovProposal(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Time)
	n += 1 + l + sovProposal(uint64(l))
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func sovProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposal(x uint64) (n int) {
	return sovProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HsProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HsProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HsProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochView", wireType)
			}
			m.EpochView = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochView |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Block == nil {
				m.Block = &Block{}
			}
			if err := m.Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeoutCert == nil {
				m.TimeoutCert = &TimeoutCert{}
			}
			if err := m.TimeoutCert.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposal = fmt.Errorf("proto: unexpected end of group")
)
